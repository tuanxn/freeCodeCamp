/*
Given a positive integer num, return the sum of all odd Fibonacci numbers that are less than or equal to num.
The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.
For example, sumFibs(10) should return 10 because all odd Fibonacci numbers less than or equal to 10 are 1, 1, 3, and 5.
*/

function sumFibs(num) {
  
  let i=0; // iterator
  const arr = [1,1]; // beginning array
  let agg = 2; // aggregated sum of last 2 numbers in array. Begin with next number to have proper do-while loop

  do {
    arr.push(agg); // push sum of last 2 elements
    i++; // increment element index to always be summing last 2 elements
    agg = arr[i] + arr[i+1]; // sum last 2 elements, could possibly have done with this arr.length-1 and arr.length-2
  }while (agg <= num); // keeping fib sequence until sum of last 2 numbers is greater than num argument
  
  return arr.filter((elem) => elem % 2 == 1).reduce((a,b) => a + b);
  // filter for odd values using mod-ish operator and then reduce to a sum of the values
}

console.log(sumFibs(4));
