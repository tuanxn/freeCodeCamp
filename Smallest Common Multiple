/*
Find the smallest common multiple of the provided parameters that can be evenly divided by both, 
as well as by all sequential numbers in the range between these parameters.
The range will be an array of two numbers that will not necessarily be in numerical order.
For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also 
evenly divisible by all numbers between 1 and 3. The answer here would be 6.
*/


// We find the least common multiple by breaking down the numbers in the range into their prime multipliers and
// multiply the greatest number of occurrences of each multiplier 

function smallestCommons(arr) {
  // Find min and max of the 2 elements in the array
  let min = arr[0];
  let max = arr[1];
  if (max < min) {
    min = arr[1];
    max = arr[0];
  }

  // Create a master array holding the prime multipliers of all sequential numbers
  let primeX = [];

  // Loop through min to max inclusive
  for (let i=min; i<=max; i++) {
    // Create temporary array to hold prime multiplers of current number
    let temp = [];
    // Create function that we will recursively call
    (function findPrimeX(i) {
      // Loop through 2 to current number passed in (first iteration will be current number)
      for (let j=2; j<=i; j++) {
        // See if current number is divisible by the current iteration
        if (i % j == 0) {
          // If so, find the divisor and quotient
          let divisor = j;
          let quotient = i / j;
          // Add divisor to the temporary arry holding prime multipliers of the current number
          temp.push(divisor);
          // Recursively call the same function on the quotient calculated
          findPrimeX(quotient);
          // Add break so that when no more quotients found and returns to calling function, the loop won't continue
          break;
        }
      }
    // Make this an IIFE (Immediately Invoked Function Expression) and pass i for first call
    })(i);
    console.log(temp);
    
    // May want to sort temp array at this point?
    
    // Create copy of master prime multiplier array to test if primes already exist in master array
    let subPrimeX = primeX.slice(0);
    // Loop through prime multiplier array of current number
    for (let k=0; k<temp.length; k++) {
      // Check to see if the prime already exists in the master array
      let foundIndex = subPrimeX.indexOf(temp[k]);
      if (foundIndex == -1) {
        // If not, add it to the master array
        primeX.push(temp[k]);
      }else {
        // If so, create subarray after found instance so we can test if the prime is found again
        subPrimeX = subPrimeX.slice(foundIndex+1);
      }
    }
  }
  console.log(primeX);
  // Multiply all elements of master array to arrive at smallest common multiple of all sequential numbers between 2 elements of array
  return primeX.reduce((agg, next) => agg * next);
}


console.log(smallestCommons([2,10]));
