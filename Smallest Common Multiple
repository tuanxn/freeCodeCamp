/*
Find the smallest common multiple of the provided parameters that can be evenly divided by both, 
as well as by all sequential numbers in the range between these parameters.
The range will be an array of two numbers that will not necessarily be in numerical order.
For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also 
evenly divisible by all numbers between 1 and 3. The answer here would be 6.
*/


// We find the least common multiple by breaking down the numbers in the range into their prime multipliers and
// multiply the greatest number of occurrences of each multiplier 

function smallestCommons(arr) {

// sort array ascending
arr.sort(function (a, b) {
  return a - b;
});

const primeMultiplierArr = [];
// initialize the array that will hold the prime multipliers of all numbers in the range

for (let rangeNum = arr[0]; rangeNum <= arr[1]; rangeNum++) {
  let rangeNumMultipliers = [rangeNum];
  // initialize an array with the current number in the range that we will break down into primes

  let level = 0;
  // use with console.log to track what level of recursion the function is at

  // function to return an array of prime multiples of a number in the range
  (function getPrime(rangeNumMultipliers, level) {
    let arrLen = rangeNumMultipliers.length;
    // necessary so that we don't not loop more than the original length before recursion increased the array length
    for (let i=0; i<arrLen; i++) {
      // loop through each element in the array
      let elem = rangeNumMultipliers[i];
      for (let j=2; j<=Math.floor(elem/2); j++) {
        // loop through each number from 2 to half of the current loop to check if it's a divisor of the element
        // note that primes that enter this loop will never satisfy the if condition
        if (elem % j == 0) {
          // if current number is a divisor of the element
          rangeNumMultipliers.splice(i, 1, j, elem / j);
          // take out the element and replace with the divisor (a prime) and the quotient
          getPrime(rangeNumMultipliers, level +1);
          // recursively pass in the new array so each new quotient will get broken down into primes
          break;
          // once recursion is finished (only primes remaining), break from inner loop
        }
      }
    }
  })(rangeNumMultipliers, level);
  // call the function right away by passing in parameters from our smallestCommons function

  let copyOfPrimeMultiplierArr = [].concat(primeMultiplierArr);
  // create a copy of the array of all prime multipliers so far

  for (let primeIndex = 0; primeIndex < rangeNumMultipliers.length; primeIndex++) {
    // loop through the prime multipliers for the current number
    let foundIndex = copyOfPrimeMultiplierArr.indexOf(rangeNumMultipliers[primeIndex]);
    // return index position of current prime in the copy of all prime list (if any)
    if (foundIndex > -1 ) {
      copyOfPrimeMultiplierArr.splice(foundIndex,1);
      // if found in all prime list already, remove from copy of all prime list (allows multiples to be added)
    }else {
      primeMultiplierArr.push(rangeNumMultipliers[primeIndex]);
      // if not found, add prime to all prime list (not the copy)
    }
  }

}

console.log(primeMultiplierArr.sort(function (a,b) { return a-b }));
// log sorted list of all prime numbers for reference

return primeMultiplierArr.reduce((a,b) => a * b);
// reduce by multiplying everything in the all primes list

}


console.log(smallestCommons([18, 23])); // returns 6056820
